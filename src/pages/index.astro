<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <title>Teste de Perfil (SAB)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet" />
  <!-- Link para o CSS externo -->
  <link rel="stylesheet" href="/style.css" />
</head>
<body>
  <!-- Cabeçalho fixo -->
  <header>
    Teste de Perfil (SAB)
  </header>

  <main id="app">
    <!-- Tela de Introdução -->
    <section id="intro">
      <h1>Bem-vindo(a)!</h1>
      <p>
        Leia cada pergunta e escolha a alternativa que mais representa como você age ou pensa em situações similares.
        Não há respostas certas ou erradas.
      </p>
      <!-- Campo de Nome -->
      <p>Por favor, insira seu nome e último sobrenome:</p>
      <input 
        type="text" 
        id="userName" 
        class="input-field" 
        placeholder="SEU NOME (EX.: IVO DIAS)"
        required
      />
      <!-- Campo de Email -->
      <p>Por favor, insira seu email:</p>
      <input 
        type="email" 
        id="userEmail" 
        class="input-field" 
        placeholder="SEU EMAIL (EX.: FULANO@TESTE.COM)"
        required
      />
      <button id="startBtn" class="btn" aria-label="Iniciar Teste">Iniciar Teste</button>
    </section>

    <!-- Tela do Questionário -->
    <section id="quiz" class="hidden"></section>

    <!-- Tela de Resultados -->
    <section id="result" class="hidden"></section>
  </main>

  <!-- Rodapé fixo -->
  <footer id="footer"></footer>

  <!-- Biblioteca html2pdf.js -->
  <script 
    src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"
    integrity="sha512-V5qfKLaOYYxQbwrZB3w+JJW9ypB4G2vQDsFSshBjWrv8OJVo10E0fYJlFiZ/bPXx8ChnMV4JZil5Y3ONBSfCfQ=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer">
  </script>

  <!-- Script principal -->
  <script>
    /* Lista completa de perfis (usamos o termo genérico "perfil") */
    const allPerfis = [
      "Controlador",
      "Perfeccionista",
      "Agradador",
      "Evitador",
      "Vítima",
      "Inquieto",
      "Hiper-realizador",
      "Hiper-vigilante",
      "Racionalizador"
    ];

    // Variáveis de controle do teste
    let currentQuestion = 0;
    let userName = '';
    let userEmail = '';
    const answers = []; // Cada resposta deverá incluir { sigla: "...", value: X }
    const questionTimes = [];
    let testStartTime = 0;
    let questionStartTime = 0;
    let ipAddress = "Carregando...";

    const introDiv = document.getElementById("intro");
    const quizDiv = document.getElementById("quiz");
    const resultDiv = document.getElementById("result");

    let questions = []; // Será carregado do arquivo assertions.json (ex.: 40 afirmações)
    let interpretations = {}; // Será carregado do arquivo interpretations.json

    // Remove o trecho entre parênteses (indicador) do final do texto
    function removeIndicador(text) {
      return text.replace(/\s*\([^)]*\)\s*$/, "");
    }

    // Embaralha array (Fisher-Yates)
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }
    function shuffleQuestionsAndOptions() {
      shuffle(questions);
      questions.forEach(q => shuffle(q.options));
    }

    // Captura IP
    fetch("https://api.ipify.org?format=json")
      .then(resp => resp.json())
      .then(data => { ipAddress = data.ip; })
      .catch(err => { ipAddress = "Indisponível"; console.error(err); });

    // Atualiza rodapé (IP, hora, SO)
    function getOS() {
      const platform = window.navigator.platform;
      const ua = window.navigator.userAgent;
      if (/(Mac|iPhone|iPod|iPad)/i.test(platform)) return "iOS / Mac OS";
      if (/Win/i.test(platform)) return "Windows";
      if (/Android/i.test(ua)) return "Android";
      if (/Linux/i.test(platform)) return "Linux";
      return "Desconhecido";
    }
    function updateFooter() {
      const footer = document.getElementById("footer");
      const timeInBrasilia = new Date().toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
      footer.textContent = `IP: ${ipAddress} | Hora de Brasília: ${timeInBrasilia} | Sistema Operacional: ${getOS()}`;
    }
    setInterval(updateFooter, 1000);

    // Formata tempo em min:seg
    function formatMinSec(ms) {
      const totalSec = Math.floor(ms / 1000);
      const min = Math.floor(totalSec / 60);
      const sec = totalSec % 60;
      return min > 0 ? `${min} min. ${sec} seg.` : `${sec} seg.`;
    }

    // Carrega as afirmações (JSON)
    fetch("/assertions.json")
      .then(resp => resp.json())
      .then(data => { questions = data; })
      .catch(err => console.error("Erro ao carregar assertions.json:", err));

    // Carrega as interpretações (JSON)
    fetch("/interpretations.json")
      .then(resp => resp.json())
      .then(data => { 
        // Transforma array em objeto indexado pela chave "sigla-nivel", ex.: "CONTR-A"
        data.forEach(item => {
          let nivelKey = item.nivel === "Alto" ? "A" : item.nivel === "Médio" ? "M" : "B";
          interpretations[item.sigla + "-" + nivelKey] = item;
        });
      })
      .catch(err => console.error("Erro ao carregar interpretations.json:", err));

    // Botão Iniciar
    document.getElementById("startBtn").addEventListener("click", () => {
      const inputName = document.getElementById("userName").value.trim();
      let inputEmail = document.getElementById("userEmail").value.trim();

      // Converte email para minúsculas
      inputEmail = inputEmail.toLowerCase();
      document.getElementById("userEmail").value = inputEmail;

      // Validação do nome
      if (inputName.length < 8 || !inputName.includes(" ")) {
        alert("Por favor, insira seu nome e último sobrenome com no mínimo 8 caracteres.");
        return;
      }

      // Validação de email
      if (!validateEmail(inputEmail)) {
        alert("Por favor, insira um email válido.");
        return;
      }

      userName = inputName.toUpperCase();
      userEmail = inputEmail;

      shuffleQuestionsAndOptions();

      testStartTime = new Date();
      introDiv.classList.add("hidden");
      quizDiv.classList.remove("hidden");
      renderQuestion();
    });

    // Validação simples de email
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email.toLowerCase());
    }

    // Renderiza cada pergunta
    function renderQuestion() {
      quizDiv.innerHTML = "";
      if (currentQuestion < questions.length) {
        const qData = questions[currentQuestion];
        questionStartTime = new Date();

        const questionNumber = document.createElement("h2");
        questionNumber.className = "question-number";
        questionNumber.textContent = `Pergunta ${currentQuestion + 1} de ${questions.length}`;
        quizDiv.appendChild(questionNumber);

        // Barra de progresso
        const progressContainer = document.createElement("div");
        progressContainer.className = "progress-container";
        quizDiv.appendChild(progressContainer);

        const progressBarBg = document.createElement("div");
        progressBarBg.className = "progress-bar-bg";
        progressContainer.appendChild(progressBarBg);

        const progressBarFill = document.createElement("div");
        progressBarFill.className = "progress-bar-fill";
        progressBarFill.style.width = `${((currentQuestion + 1) / questions.length) * 100}%`;
        progressBarBg.appendChild(progressBarFill);

        // Texto da pergunta
        const questionText = document.createElement("p");
        questionText.className = "question-text";
        questionText.textContent = removeIndicador(qData.text);
        quizDiv.appendChild(questionText);

        // Opções (Escala Likert: 1 a 4)
        qData.options.forEach((option, index) => {
          const btn = document.createElement("button");
          btn.className = "option";
          // Cada alternativa mostra a escala (ex.: "a) Discordo totalmente", "b) Discordo parcialmente", etc.)
          const alternativas = ["(1) Discordo totalmente", "(2) Discordo parcialmente", "(3) Concordo parcialmente", "(4) Concordo totalmente"];
          btn.textContent = `${alternativas[index]} – ${removeIndicador(option.text)}`;
          btn.onclick = () => {
            // Aqui, guardamos a resposta como um objeto { sigla: ..., value: ... }
            // Considerando que a alternativa 0 = 1 ponto, 1 = 2 pontos, etc.
            answers.push({ sigla: option.profile, value: index + 1 });
            const elapsed = new Date() - questionStartTime;
            questionTimes.push(elapsed);
            currentQuestion++;
            renderQuestion();
          };
          quizDiv.appendChild(btn);
        });
      } else {
        quizDiv.classList.add("hidden");
        renderResult();
      }
    }

    // Função para converter a soma dos pontos em classificação textual
    function classificarPontuacao(total) {
      if (total >= 7) return "A"; // Alto
      else if (total >= 5) return "M"; // Médio
      else return "B"; // Baixo
    }

    // Renderiza os resultados
    function renderResult() {
      resultDiv.innerHTML = "";

      // Cabeçalho de Resultado
      const headerDiv = document.createElement("div");
      headerDiv.id = "result-header";
      headerDiv.innerHTML = `<strong>Resultado:</strong> ${userName} (SAB)`;
      resultDiv.appendChild(headerDiv);

      // Data/hora
      const now = new Date();
      const resultDatetime = now.toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
      const dateLine = document.createElement("p");
      dateLine.className = "result-datetime";
      dateLine.textContent = `Gerado em: ${resultDatetime}`;
      resultDiv.appendChild(dateLine);

      // Calcula a soma de pontos para cada perfil
      let scores = {};
      answers.forEach(resp => {
        if (!scores[resp.sigla]) {
          scores[resp.sigla] = 0;
        }
        scores[resp.sigla] += resp.value;
      });

      // Container de Resultados
      const resultsContainer = document.createElement("div");
      resultsContainer.className = "results-container";

      // Para cada perfil (usando allPerfis)
      allPerfis.forEach(perfil => {
        const totalPontos = scores[perfil] || 0;
        // Se não houve respostas para o perfil, assumimos 0 (ou podemos optar por ignorar)
        // Para este exemplo, vamos mostrar mesmo que 0
        const nivelLetra = totalPontos > 0 ? classificarPontuacao(totalPontos) : "B";
        // Monta a chave para buscar no JSON de interpretações (ex.: "CONTR-A")
        const chave = perfil.substring(0, 5).toUpperCase() + "-" + nivelLetra;
        const interpretacao = interpretations[chave] || { perfil: perfil, textoParticipante: "Sem interpretação.", textoAvaliador: "Sem interpretação." };

        // Cria o bloco para o perfil
        const perfilDiv = document.createElement("div");
        perfilDiv.className = "perfil-result";
        perfilDiv.innerHTML = `
          <h3>${interpretacao.perfil || perfil}</h3>
          <p><strong>Pontuação:</strong> ${totalPontos} (${nivelLetra === "A" ? "Alto" : nivelLetra === "M" ? "Médio" : "Baixo"})</p>
          <p><strong>Interpretação (Participante):</strong> ${interpretacao.textoParticipante}</p>
          <p><strong>Interpretação (Avaliador):</strong> ${interpretacao.textoAvaliador}</p>
        `;
        resultsContainer.appendChild(perfilDiv);
      });

      resultDiv.appendChild(resultsContainer);
      resultDiv.classList.remove("hidden");

      // (Opcional) Você pode implementar aqui a função para gerar PDF usando html2pdf.js, se necessário.
    }
  </script>
</body>
</html>
