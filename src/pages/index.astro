<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <title>Teste de Perfil (SAB)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet" />
  <!-- Link para o CSS externo -->
  <link rel="stylesheet" href="/style.css" />
</head>
<body>
  <!-- Cabeçalho fixo -->
  <header>
    Teste de Perfil (SAB)
  </header>

  <main id="app">
    <!-- Tela de Introdução -->
    <section id="intro">
      <h1>Bem-vindo(a)!</h1>
      <p>
        Leia cada pergunta e escolha a alternativa que mais representa como você age ou pensa em situações similares.
        Não há respostas certas ou erradas.
      </p>
      <!-- Campo de Nome -->
      <p>Por favor, insira seu nome e último sobrenome:</p>
      <input 
        type="text" 
        id="userName" 
        class="input-field" 
        placeholder="SEU NOME (EX.: IVO DIAS)"
        required
      />

      <!-- Campo de Email -->
      <p>Por favor, insira seu email:</p>
      <input 
        type="email" 
        id="userEmail" 
        class="input-field" 
        placeholder="SEU EMAIL (EX.: FULANO@TESTE.COM)"
        required
      />

      <button id="startBtn" class="btn" aria-label="Iniciar Teste">Iniciar Teste</button>
    </section>

    <!-- Tela do Questionário -->
    <section id="quiz" class="hidden"></section>

    <!-- Tela de Resultados -->
    <section id="result" class="hidden"></section>
  </main>

  <!-- Rodapé fixo -->
  <footer id="footer"></footer>

  <!-- 1) Carrega a biblioteca html2pdf.js ANTES do seu script principal -->
  <script 
    src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"
    integrity="sha512-V5qfKLaOYYxQbwrZB3w+JJW9ypB4G2vQDsFSshBjWrv8OJVo10E0fYJlFiZ/bPXx8ChnMV4JZil5Y3ONBSfCfQ=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer">
  </script>

  <!-- 2) Seu script principal -->
  <script>
    /* Lista completa de sabotadores */
    const allSabotadores = [
      "Controlador",
      "Perfeccionista",
      "Agradador",
      "Evitador",
      "Vítima",
      "Inquieto",
      "Hiper-realizador",
      "Hiper-vigilante",
      "Racionalizador"
    ];

    // Variáveis de controle do teste
    let currentQuestion = 0;
    let userName = '';
    let userEmail = '';
    const answers = [];
    const questionTimes = [];
    let testStartTime = 0;
    let questionStartTime = 0;
    let ipAddress = "Carregando...";

    const introDiv = document.getElementById("intro");
    const quizDiv = document.getElementById("quiz");
    const resultDiv = document.getElementById("result");

    let questions = []; // Será carregado do arquivo questions.json

    // Remove o sabotador (trecho entre parênteses) do final do texto
    function removeSabotador(text) {
      return text.replace(/\s*\([^)]*\)\s*$/, "");
    }

    // Embaralha array (Fisher-Yates)
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }
    function shuffleQuestionsAndOptions() {
      shuffle(questions);
      questions.forEach(q => shuffle(q.options));
    }

    // Captura IP
    fetch("https://api.ipify.org?format=json")
      .then(resp => resp.json())
      .then(data => { ipAddress = data.ip; })
      .catch(err => { ipAddress = "Indisponível"; console.error(err); });

    // Atualiza rodapé (IP, hora, SO)
    function getOS() {
      const platform = window.navigator.platform;
      const ua = window.navigator.userAgent;
      if (/(Mac|iPhone|iPod|iPad)/i.test(platform)) return "iOS / Mac OS";
      if (/Win/i.test(platform)) return "Windows";
      if (/Android/i.test(ua)) return "Android";
      if (/Linux/i.test(platform)) return "Linux";
      return "Desconhecido";
    }
    function updateFooter() {
      const footer = document.getElementById("footer");
      const timeInBrasilia = new Date().toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
      footer.textContent = `IP: ${ipAddress} | Hora de Brasília: ${timeInBrasilia} | Sistema Operacional: ${getOS()}`;
    }
    setInterval(updateFooter, 1000);

    // Formata tempo em min:seg
    function formatMinSec(ms) {
      const totalSec = Math.floor(ms / 1000);
      const min = Math.floor(totalSec / 60);
      const sec = totalSec % 60;
      return min > 0 ? `${min} min. ${sec} seg.` : `${sec} seg.`;
    }

    // Carrega perguntas
    fetch("/questions.json")
      .then(resp => resp.json())
      .then(data => {
        questions = data;
      })
      .catch(err => console.error("Erro ao carregar questions.json:", err));

    // Botão Iniciar
    document.getElementById("startBtn").addEventListener("click", () => {
      const inputName = document.getElementById("userName").value.trim();
      let inputEmail = document.getElementById("userEmail").value.trim();

      // Converte email para minúsculas
      inputEmail = inputEmail.toLowerCase();
      document.getElementById("userEmail").value = inputEmail;

      // Validação do nome
      if (inputName.length < 8 || !inputName.includes(" ")) {
        alert("Por favor, insira seu nome e último sobrenome com no mínimo 8 caracteres.");
        return;
      }

      // Validação de email
      if (!validateEmail(inputEmail)) {
        alert("Por favor, insira um email válido.");
        return;
      }

      userName = inputName.toUpperCase();
      userEmail = inputEmail;

      // Embaralha perguntas
      shuffleQuestionsAndOptions();

      testStartTime = new Date();
      introDiv.classList.add("hidden");
      quizDiv.classList.remove("hidden");
      renderQuestion();
    });

    // Função simples de validação de email
    function validateEmail(email) {
      // Regex básica
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email.toLowerCase());
    }

    function renderQuestion() {
      quizDiv.innerHTML = "";
      if (currentQuestion < questions.length) {
        const qData = questions[currentQuestion];
        questionStartTime = new Date();

        const questionNumber = document.createElement("h2");
        questionNumber.className = "question-number";
        questionNumber.textContent = `Pergunta ${currentQuestion + 1} de ${questions.length}`;
        quizDiv.appendChild(questionNumber);

        // Barra de progresso (topo)
        const progressContainer = document.createElement("div");
        progressContainer.className = "progress-container";
        quizDiv.appendChild(progressContainer);

        const progressBarBg = document.createElement("div");
        progressBarBg.className = "progress-bar-bg";
        progressContainer.appendChild(progressBarBg);

        const progressBarFill = document.createElement("div");
        progressBarFill.className = "progress-bar-fill";
        progressBarFill.style.width = `${((currentQuestion + 1) / questions.length) * 100}%`;
        progressBarBg.appendChild(progressBarFill);

        // Texto da pergunta
        const questionText = document.createElement("p");
        questionText.className = "question-text";
        questionText.textContent = removeSabotador(qData.text);
        quizDiv.appendChild(questionText);

        // Opções
        qData.options.forEach((option, index) => {
          const btn = document.createElement("button");
          btn.className = "option";
          btn.textContent = `${["a)", "b)", "c)", "d)"][index]} ${removeSabotador(option.text)}`;
          btn.onclick = () => {
            const elapsed = new Date() - questionStartTime;
            questionTimes.push(elapsed);
            answers.push(option.profile);
            currentQuestion++;
            renderQuestion();
          };
          quizDiv.appendChild(btn);
        });
      } else {
        quizDiv.classList.add("hidden");
        renderResult();
      }
    }

    function renderResult() {
      resultDiv.innerHTML = "";

      // Cabeçalho
      const headerDiv = document.createElement("div");
      headerDiv.id = "result-header";
      headerDiv.innerHTML = `<strong>Resultado:</strong> ${userName} (SAB)`;
      resultDiv.appendChild(headerDiv);

      // Data/hora
      const now = new Date();
      const resultDatetime = now.toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
      const dateLine = document.createElement("p");
      dateLine.className = "result-datetime";
      dateLine.textContent = `Gerado em: ${resultDatetime}`;
      resultDiv.appendChild(dateLine);

      // Container de resultados
      const resultsContainer = document.createElement("div");
      resultsContainer.className = "results-container";

      // Coluna esquerda
      const leftDiv = document.createElement("div");
      leftDiv.className = "results-left";

      const total = questions.length;
      const counts = answers.reduce((acc, profile) => {
        acc[profile] = (acc[profile] || 0) + 1;
        return acc;
      }, {});

      allSabotadores.forEach(sab => {
        const count = counts[sab] || 0;
        const percent = Math.round((count / total) * 100);

        const itemDiv = document.createElement("div");
        itemDiv.className = "result-item";

        // Barra de fundo (preenchimento)
        const bar = document.createElement("div");
        bar.className = "percentage-bar";

        const fill = document.createElement("div");
        fill.className = "percentage-fill";
        fill.style.width = percent + "%";
        fill.textContent = percent + "%";

        bar.appendChild(fill);

        const sabotadorLabel = document.createElement("span");
        sabotadorLabel.className = "sabotador-label";
        sabotadorLabel.textContent = sab;

        itemDiv.appendChild(bar);
        itemDiv.appendChild(sabotadorLabel);
        leftDiv.appendChild(itemDiv);
      });

      // Coluna direita
      const rightDiv = document.createElement("div");
      rightDiv.className = "results-right";

      const testTotalTime = new Date() - testStartTime;
      const averageTime = questionTimes.reduce((sum, t) => sum + t, 0) / questionTimes.length;
      const fastestTime = Math.min(...questionTimes);
      const slowestTime = Math.max(...questionTimes);
      const fastestQuestion = questionTimes.indexOf(fastestTime) + 1;
      const slowestQuestion = questionTimes.indexOf(slowestTime) + 1;

      let predominant = null;
      let maxCount = -1;
      Object.keys(counts).forEach(key => {
        if (counts[key] > maxCount) {
          maxCount = counts[key];
          predominant = key;
        }
      });

      const infoCard = document.createElement("div");
      infoCard.className = "info-card";
      infoCard.innerHTML = `
        <p><strong>Total:</strong> ${formatMinSec(testTotalTime)}</p>
        <p><strong>Média:</strong> ${formatMinSec(averageTime)}</p>
        <p><strong>Rápida:</strong> Q${fastestQuestion} (${formatMinSec(fastestTime)})</p>
        <p><strong>Lenta:</strong> Q${slowestQuestion} (${formatMinSec(slowestTime)})</p>
        ${ predominant ? `<p><strong>Traço Predominante:</strong> ${predominant}</p>` : "" }
      `;
      rightDiv.appendChild(infoCard);

      resultsContainer.appendChild(leftDiv);
      resultsContainer.appendChild(rightDiv);
      resultDiv.appendChild(resultsContainer);

      // Botão para gerar PDF
      const pdfBtn = document.createElement("button");
      pdfBtn.textContent = "Gerar PDF";
      pdfBtn.className = "btn";
      pdfBtn.onclick = gerarPDF;
      resultDiv.appendChild(pdfBtn);

      resultDiv.classList.remove("hidden");
    }

    // Função para gerar PDF usando html2pdf.js
    function gerarPDF() {
      const elemento = document.getElementById("result");
      const opcoes = {
        margin: 0.5,
        filename: 'resultado-teste.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
      };

      // Agora a função html2pdf está definida, pois carregamos a lib antes deste script
      html2pdf().from(elemento).set(opcoes).save();
    }
  </script>
</body>
</html>
