<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <title>Teste de Perfil (SAB)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet" />
  <style>
    /* RESET BÁSICO */
    html, body, div, span, applet, object, iframe,
    h1, h2, h3, h4, h5, h6, p, blockquote, pre,
    a, abbr, acronym, address, big, cite, code,
    del, dfn, em, img, ins, kbd, q, s, samp,
    small, strike, strong, sub, sup, tt, var,
    b, u, i, center, dl, dt, dd, ol, ul, li,
    fieldset, form, label, legend, table, caption,
    tbody, tfoot, thead, tr, th, td, article, aside,
    canvas, details, embed, figure, figcaption,
    footer, header, hgroup, menu, nav, output, ruby,
    section, summary, time, mark, audio, video {
      margin: 0; 
      padding: 0; 
      border: 0;
      font-size: 100%;
      font: inherit;
      vertical-align: baseline;
    }
    article, aside, details, figcaption, figure,
    footer, header, hgroup, menu, nav, section {
      display: block;
    }
    body {
      line-height: 1;
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(135deg, #f0f0f0, #ffffff);
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    ol, ul { list-style: none; }
    blockquote, q { quotes: none; }
    blockquote:before, blockquote:after,
    q:before, q:after { content: ''; content: none; }
    table { border-collapse: collapse; border-spacing: 0; }

    /* Cabeçalho e Rodapé */
    header, footer {
      width: 90%;
      max-width: 650px;
      margin: 10px auto;
      border-radius: 5px;
      text-align: center;
    }
    header {
      background-color: #000;
      color: #fff;
      padding: 15px 10px;
      font-size: 1.6em;
      font-weight: 600;
    }
    footer {
      background-color: #000;
      color: #fff;
      padding: 5px 10px;
      font-size: 10px;
    }

    /* Container principal */
    #app {
      background: #fff;
      width: 90%;
      max-width: 650px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      padding: 30px;
      margin: 20px auto;
    }
    .hidden { display: none; }

    /* Tela de Introdução */
    #intro {
      padding: 20px;
      text-align: center;
    }
    #intro h1 {
      margin: 0.5em 0;
      font-size: 1.4em;
      color: #333;
    }
    #intro p {
      color: #333;
      margin: 0.5em 0;
      line-height: 1.4;
    }
    .input-field {
      width: 100%;
      padding: 12px;
      font-size: 1em;
      border: 1px solid #ccc;
      border-radius: 4px;
      margin: 15px 0;
      text-transform: uppercase;
    }
    .btn {
      background: #2E7D32;
      color: #fff;
      border: none;
      padding: 12px 20px;
      border-radius: 4px;
      font-size: 1em;
      cursor: pointer;
      transition: background 0.3s;
      margin: 0 auto;
      display: block;
    }
    .btn:hover {
      background: #1B5E20;
    }

    /* Questões */
    #quiz .question-number {
      margin-bottom: 10px;
      text-align: left;
      font-weight: 500;
      color: #333;
    }
    #quiz .question-text {
      margin-bottom: 20px;
      text-align: left;
      color: #333;
    }
    .option {
      display: block;
      width: 100%;
      background: #E8EEF3;
      color: #333;
      border: 1px solid #A1B0C5;
      padding: 12px;
      margin: 10px 0;
      border-radius: 4px;
      font-size: 1em;
      cursor: pointer;
      transition: background 0.3s, transform 0.2s;
      text-align: left;
    }
    .option:hover {
      background: #D0D8E2;
      transform: scale(1.02);
    }

    /* Barra de Progresso */
    .progress-container {
      width: 100%;
      margin: 10px 0 20px;
    }
    .progress-bar-bg {
      width: 100%;
      background-color: #ccc;
      height: 10px;
      border-radius: 5px;
      overflow: hidden;
    }
    .progress-bar-fill {
      height: 100%;
      background-color: #5A6EAA;
      border-radius: 5px;
      transition: width 0.3s;
    }

    /* Tela de Resultados */
    #result-header {
      text-align: center;
      margin: 0;
      font-size: 1em;
      line-height: 1.4;
      color: #333;
    }
    #result-header strong {
      font-weight: 500;
    }
    .result-datetime {
      font-size: 0.85em;
      color: #666;
      margin-top: 4px;
      text-align: center;
    }
    .results-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
      align-items: flex-start;
    }
    .results-left,
    .results-right {
      flex: 1;
      min-width: 250px;
    }
    /* Sabotadores */
    .result-item {
      display: flex;
      align-items: center;
      margin: 8px 0;
    }
    .percentage-bar {
      width: 50%;
      background: #e9ecef;
      border-radius: 4px;
      overflow: hidden;
      margin-right: 10px;
      height: 24px;
    }
    .percentage-fill {
      height: 100%;
      line-height: 24px;
      color: transparent; /* sem texto dentro da barra */
      text-align: center;
      font-weight: bold;
      border-radius: 4px;
      transition: width 0.5s;
      background: linear-gradient(90deg, #5A6EAA, #4A5A8A);
    }
    .sabotador-label {
      font-size: 0.9em;
      color: #333;
      white-space: nowrap;
    }
    /* Painel do Tempo e Traço Predominante */
    .info-card {
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 10px;
      margin-top: 10px;
      font-size: 0.85em;
      color: #333;
    }
    .info-card p {
      margin: 6px 0;
    }
    .info-card strong {
      font-weight: 500;
    }
  </style>
</head>
<body>
  <!-- Cabeçalho fixo -->
  <header>
    Teste de Perfil (SAB) v2.02
  </header>

  <main id="app">
    <!-- Tela de Introdução -->
    <section id="intro">
      <h1>Bem-vindo(a)!</h1>
      <p>
        Leia cada pergunta e escolha a alternativa que mais representa como você age ou pensa em situações similares.
        Não há respostas certas ou erradas.
      </p>
      <p>Por favor, insira seu nome para iniciar:</p>
      <input type="text" id="userName" class="input-field" placeholder="Seu nome (Ex.: IVO DIAS)" />
      <button id="startBtn" class="btn" aria-label="Iniciar Teste">Iniciar Teste</button>
    </section>

    <!-- Tela do Questionário -->
    <section id="quiz" class="hidden"></section>

    <!-- Tela de Resultados -->
    <section id="result" class="hidden"></section>
  </main>

  <!-- Rodapé fixo (fundo preto, texto branco) -->
  <footer id="footer"></footer>

  <script>
    /* 
      Substitua AQUI com TODAS as 40 perguntas (P1 a P40), 
      como no exemplo que você forneceu, sem reticências.
    */
    const questions = [
      // Exemplo de 2 perguntas. INSIRA aqui as 40 que você já possui.
      {
        text: "Quando preciso lidar com um prazo apertado, eu: (P1)",
        options: [
          { text: "Tomo o controle da situação para garantir que tudo seja feito no prazo. (Controlador)", profile: "Controlador" },
          { text: "Me preocupo obsessivamente com os detalhes para evitar erros. (Perfeccionista)", profile: "Perfeccionista" },
          { text: "Tento agradar os outros para evitar conflitos enquanto trabalho. (Agradador)", profile: "Agradador" },
          { text: "Procrastino e adio as tarefas difíceis. (Evitador)", profile: "Evitador" }
        ]
      },
      {
        text: "Quando recebo críticas sobre meu trabalho, eu: (P2)",
        options: [
          { text: "Reflito obsessivamente sobre o que poderia ter feito melhor. (Perfeccionista)", profile: "Perfeccionista" },
          { text: "Tento justificar o que fiz para evitar ser culpado. (Controlador)", profile: "Controlador" },
          { text: "Me sinto magoado, achando que as pessoas não reconhecem meu esforço. (Vítima)", profile: "Vítima" },
          { text: "Fico pensando em outra atividade para esquecer o ocorrido. (Inquieto)", profile: "Inquieto" }
        ]
      },
      // ... e assim por diante até P40
    ];

    // Lista completa de sabotadores
    const allSabotadores = [
      "Controlador",
      "Perfeccionista",
      "Agradador",
      "Evitador",
      "Vítima",
      "Inquieto",
      "Hiper-realizador",
      "Hiper-vigilante",
      "Racionalizador"
    ];

    // Embaralhar perguntas (comente se quiser ordem fixa)
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }
    function shuffleQuestionsAndOptions() {
      shuffle(questions);
      questions.forEach(q => shuffle(q.options));
    }

    // Captura IP
    let ipAddress = "Carregando...";
    fetch("https://api.ipify.org?format=json")
      .then(resp => resp.json())
      .then(data => { ipAddress = data.ip; })
      .catch(err => { ipAddress = "Indisponível"; });

    // Rodapé (IP, hora, SO)
    function getOS() {
      const platform = window.navigator.platform;
      const ua = window.navigator.userAgent;
      if (/(Mac|iPhone|iPod|iPad)/i.test(platform)) return "iOS / Mac OS";
      if (/Win/i.test(platform)) return "Windows";
      if (/Android/i.test(ua)) return "Android";
      if (/Linux/i.test(platform)) return "Linux";
      return "Desconhecido";
    }
    function updateFooter() {
      const footer = document.getElementById("footer");
      const timeInBrasilia = new Date().toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
      footer.textContent = `IP: ${ipAddress} | Hora de Brasília: ${timeInBrasilia} | Sistema Operacional: ${getOS()}`;
    }
    setInterval(updateFooter, 1000);

    // Formata tempo (ms) em min/seg
    function formatMinSec(ms) {
      const totalSec = Math.floor(ms / 1000);
      const min = Math.floor(totalSec / 60);
      const sec = totalSec % 60;
      if (min > 0) {
        return `${min} min. ${sec} seg.`;
      } else {
        return `${sec} seg.`;
      }
    }

    // Lógica principal do teste
    let currentQuestion = 0;
    let userName = '';
    const answers = [];
    const questionTimes = [];
    let testStartTime = 0;
    let questionStartTime = 0;

    const introDiv = document.getElementById("intro");
    const quizDiv = document.getElementById("quiz");
    const resultDiv = document.getElementById("result");

    // Inicia
    document.getElementById("startBtn").addEventListener("click", () => {
      const inputName = document.getElementById("userName").value.trim();
      if (inputName.length < 8 || !inputName.includes(" ")) {
        alert("Por favor, insira seu nome completo (nome e sobrenome) com no mínimo 8 caracteres.");
        return;
      }
      userName = inputName.toUpperCase();

      // Embaralha (comente se quiser manter ordem fixa)
      shuffleQuestionsAndOptions();

      testStartTime = new Date();
      introDiv.classList.add("hidden");
      quizDiv.classList.remove("hidden");
      renderQuestion();
    });

    function removeSabotador(text) {
      // Remove o texto entre parênteses do final
      return text.replace(/\s*\([^)]*\)\s*$/, "");
    }

    function renderQuestion() {
      quizDiv.innerHTML = "";
      if (currentQuestion < questions.length) {
        const qData = questions[currentQuestion];
        questionStartTime = new Date();

        const questionNumber = document.createElement("h2");
        questionNumber.className = "question-number";
        questionNumber.textContent = `Pergunta ${currentQuestion + 1} de ${questions.length}`;
        quizDiv.appendChild(questionNumber);

        // Barra de progresso
        const progressContainer = document.createElement("div");
        progressContainer.className = "progress-container";
        quizDiv.appendChild(progressContainer);

        const progressBarBg = document.createElement("div");
        progressBarBg.className = "progress-bar-bg";
        progressContainer.appendChild(progressBarBg);

        const progressBarFill = document.createElement("div");
        progressBarFill.className = "progress-bar-fill";
        progressBarFill.style.width = `${((currentQuestion + 1) / questions.length) * 100}%`;
        progressBarBg.appendChild(progressBarFill);

        // Texto da pergunta (sem sabotador)
        const questionText = document.createElement("p");
        questionText.className = "question-text";
        questionText.textContent = removeSabotador(qData.text);
        quizDiv.appendChild(questionText);

        // Opções
        qData.options.forEach((option, index) => {
          const btn = document.createElement("button");
          btn.className = "option";
          btn.textContent = `${["a)", "b)", "c)", "d)"][index]} ${removeSabotador(option.text)}`;
          btn.onclick = () => {
            const elapsed = new Date() - questionStartTime;
            questionTimes.push(elapsed);
            answers.push(option.profile);
            currentQuestion++;
            renderQuestion();
          };
          quizDiv.appendChild(btn);
        });
      } else {
        quizDiv.classList.add("hidden");
        renderResult();
      }
    }

    function renderResult() {
      resultDiv.innerHTML = "";

      const headerDiv = document.createElement("div");
      headerDiv.id = "result-header";
      headerDiv.innerHTML = `<strong>Resultado:</strong> ${userName} (SAB)`;
      resultDiv.appendChild(headerDiv);

      // Data e hora do resultado
      const now = new Date();
      const resultDatetime = now.toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
      const dateLine = document.createElement("p");
      dateLine.className = "result-datetime";
      dateLine.textContent = `Gerado em: ${resultDatetime}`;
      resultDiv.appendChild(dateLine);

      // Container dos resultados
      const resultsContainer = document.createElement("div");
      resultsContainer.className = "results-container";

      // Coluna da esquerda: sabotadores
      const leftDiv = document.createElement("div");
      leftDiv.className = "results-left";

      const total = questions.length;
      const counts = answers.reduce((acc, profile) => {
        acc[profile] = (acc[profile] || 0) + 1;
        return acc;
      }, {});

      allSabotadores.forEach(sab => {
        const count = counts[sab] || 0;
        const percent = Math.round((count / total) * 100);

        const itemDiv = document.createElement("div");
        itemDiv.className = "result-item";

        // Barra
        const bar = document.createElement("div");
        bar.className = "percentage-bar";

        const fill = document.createElement("div");
        fill.className = "percentage-fill";
        fill.style.width = percent + "%";

        bar.appendChild(fill);

        // Nome do sabotador
        const sabotadorLabel = document.createElement("span");
        sabotadorLabel.className = "sabotador-label";
        sabotadorLabel.textContent = sab;

        itemDiv.appendChild(bar);
        itemDiv.appendChild(sabotadorLabel);
        leftDiv.appendChild(itemDiv);
      });

      // Coluna da direita: tempo e traço predominante
      const rightDiv = document.createElement("div");
      rightDiv.className = "results-right";

      const testTotalTime = new Date() - testStartTime;
      const averageTime = questionTimes.reduce((sum, t) => sum + t, 0) / questionTimes.length;
      const fastestTime = Math.min(...questionTimes);
      const slowestTime = Math.max(...questionTimes);
      const fastestQuestion = questionTimes.indexOf(fastestTime) + 1;
      const slowestQuestion = questionTimes.indexOf(slowestTime) + 1;

      // Traço predominante
      let predominant = null;
      let maxCount = -1;
      Object.keys(counts).forEach(key => {
        if (counts[key] > maxCount) {
          maxCount = counts[key];
          predominant = key;
        }
      });

      const infoCard = document.createElement("div");
      infoCard.className = "info-card";
      infoCard.innerHTML = `
        <p><strong>Total:</strong> ${formatMinSec(testTotalTime)}</p>
        <p><strong>Média:</strong> ${formatMinSec(averageTime)}</p>
        <p><strong>Rápida:</strong> Q${fastestQuestion} (${formatMinSec(fastestTime)})</p>
        <p><strong>Lenta:</strong> Q${slowestQuestion} (${formatMinSec(slowestTime)})</p>
      `;

      if (predominant) {
        infoCard.innerHTML += `
          <p><strong>Traço Predominante:</strong> ${predominant}</p>
        `;
      }

      rightDiv.appendChild(infoCard);
      resultsContainer.appendChild(leftDiv);
      resultsContainer.appendChild(rightDiv);

      resultDiv.appendChild(resultsContainer);
      resultDiv.classList.remove("hidden");
    }
  </script>
</body>
</html>
